(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{225:function(e,t,i){"use strict";i.r(t);var a=i(1),n=Object(a.a)({},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),i("p",[e._v("This project is a port of the C# EsrGo Interface application to Python. The goal is to explore the Python programming language and environment, using a real-world application to provide challenges.")]),e._v(" "),i("p",[e._v("The aspects I’m interested in are:")]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),i("FlattenSidebarNav"),e._v(" "),i("MiniMap")],1)},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"a-c-interface-application-port-to-python"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-c-interface-application-port-to-python","aria-hidden":"true"}},[this._v("#")]),this._v(" A C# Interface Application Port to Python")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[this._v("#")]),this._v(" Overview")])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ul",[i("li",[i("p",[e._v("IDE tools, specifically PyCharm from JetBrains")])]),e._v(" "),i("li",[i("p",[e._v("Structural programming patterns and paradigms such as Commands, Events, DCI")])]),e._v(" "),i("li",[i("p",[e._v("Database programming with a Python ORM")])]),e._v(" "),i("li",[i("p",[e._v("Pipeline processing of large CSV file")])]),e._v(" "),i("li",[i("p",[e._v("Error handling in the pipeline architecture")])]),e._v(" "),i("li",[i("p",[e._v("Strategy pattern for parsing a mixed-record CSV file")])]),e._v(" "),i("li",[i("p",[e._v("Code generation from XML definitions")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"sections"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sections","aria-hidden":"true"}},[this._v("#")]),this._v(" Sections")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"domain-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#domain-model","aria-hidden":"true"}},[this._v("#")]),this._v(" Domain Model")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("p",[this._v("Using Code Generation (Scaffolding) to Manage the Domain\nI was first introduced to domain code generation in the HealthRoster project. The idea is appealing when dealing with large domains, especially if the domain changes at regular intervals. This presents an opportunity to try out Python string handling and list comprehension.")])]),this._v(" "),t("li",[t("p",[this._v("Serializing Objects to XML and Json in a Consistent Order\nSerialization of objects is useful in many places, but Python suffers from “random” ordering because object attributes are stored in a dictionary. This section explores several of Pythons metaprogramming techniques to resolve this.")])]),this._v(" "),t("li",[t("p",[this._v("Initializing Domain Entities from *args\nVarious parts of the application require model entities to be initialised from a Dictionary or KeyedTuple. This section looks at handling *args and **kwargs to do this.")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"application-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#application-structure","aria-hidden":"true"}},[this._v("#")]),this._v(" Application Structure")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("p",[this._v("Commands\nCommands are classes which perform (or orchestrate) the functions of the application. They will typically correspond to the use-cases of the system, so they are useful as a focal point for understanding the code.")])]),this._v(" "),t("li",[t("p",[this._v("Events")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"process"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process","aria-hidden":"true"}},[this._v("#")]),this._v(" Process")])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ul",[i("li",[i("p",[e._v("CSV Processing via Data Streaming\nThe CSV processor is a component that takes a file of text and returns a stream of entities. Streaming is the key to handling large files, and even for smaller files it’s useful if there are a lot of steps.")])]),e._v(" "),i("li",[i("p",[e._v("File Handling Protocol with Regex\nThe naming convention of the CSV files encodes a protocol for managing the transfer of these files. Regex is a good way to convert the filename string into a strong type, which makes it easier to apply the control logic. This component uses regex named groups and python list comprehension to transform the file names to objects, and lambda expressions to reduce code repetition.")])]),e._v(" "),i("li",[i("p",[e._v("Structured Logging with XML Serialization\nThis application logs process info to XML, so there is a little more structure than a flat text file provides.")]),e._v(" "),i("p",[e._v("Python features used include the Context Manager protocol to ensure the log is written even if the process fails, and a Decorator to make the code less invasive.")]),e._v(" "),i("p",[e._v("Structured data of any arbitrary complexity can be output by using a recursive function which can emit any depth of nested objects. Within this function the standard library xml.etree is used. Individual objects control their own XML representation via a "),i("strong",[e._v("xml")]),e._v(" attribute (or all properties if none specified).")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"database"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#database","aria-hidden":"true"}},[this._v("#")]),this._v(" Database")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("p",[this._v("Extracting Data with SqlAlchemy\nThe SqlAlchemy library for accessing SQL databases is fairly straight forward to implement, although there are some things to watch out for. This document is a run-through for two queries involving inner and outer table joins, column restriction, and a self-joined table.")])]),this._v(" "),t("li",[t("p",[this._v("Query Window paging with SqlAlchemy\nThe QueryWindow object enhances SqlAlchemy queries by allowing the results to be paged. This uses the SqlAlchemy aggregate function over() to find page boundaries, then applies the filter() function on the original query to produce subsets of the results.")])]),this._v(" "),t("li",[t("p",[this._v("Query Windowing with a Filter criteria\nThis answers a question on groups.google.com about use of query windows with a pre-filtered base query, as opposed to querying against the whole table.")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"testing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#testing","aria-hidden":"true"}},[this._v("#")]),this._v(" Testing")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("BDD and TDD Testing, Profiling and Debugging")])])}],!1,null,null,null);n.options.__file="ReadMe.md";t.default=n.exports}}]);